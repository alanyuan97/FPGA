// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="numadd,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.440000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=144,HLS_SYN_LUT=264}" *)

module numadd (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_axi_add_io_AWVALID,
        s_axi_add_io_AWREADY,
        s_axi_add_io_AWADDR,
        s_axi_add_io_WVALID,
        s_axi_add_io_WREADY,
        s_axi_add_io_WDATA,
        s_axi_add_io_WSTRB,
        s_axi_add_io_ARVALID,
        s_axi_add_io_ARREADY,
        s_axi_add_io_ARADDR,
        s_axi_add_io_RVALID,
        s_axi_add_io_RREADY,
        s_axi_add_io_RDATA,
        s_axi_add_io_RRESP,
        s_axi_add_io_BVALID,
        s_axi_add_io_BREADY,
        s_axi_add_io_BRESP,
        ap_clk,
        ap_rst_n
);

parameter    C_S_AXI_ADD_IO_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_ADD_IO_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_ADD_IO_WSTRB_WIDTH = (C_S_AXI_ADD_IO_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   s_axi_add_io_AWVALID;
output   s_axi_add_io_AWREADY;
input  [C_S_AXI_ADD_IO_ADDR_WIDTH - 1 : 0] s_axi_add_io_AWADDR;
input   s_axi_add_io_WVALID;
output   s_axi_add_io_WREADY;
input  [C_S_AXI_ADD_IO_DATA_WIDTH - 1 : 0] s_axi_add_io_WDATA;
input  [C_S_AXI_ADD_IO_WSTRB_WIDTH - 1 : 0] s_axi_add_io_WSTRB;
input   s_axi_add_io_ARVALID;
output   s_axi_add_io_ARREADY;
input  [C_S_AXI_ADD_IO_ADDR_WIDTH - 1 : 0] s_axi_add_io_ARADDR;
output   s_axi_add_io_RVALID;
input   s_axi_add_io_RREADY;
output  [C_S_AXI_ADD_IO_DATA_WIDTH - 1 : 0] s_axi_add_io_RDATA;
output  [1:0] s_axi_add_io_RRESP;
output   s_axi_add_io_BVALID;
input   s_axi_add_io_BREADY;
output  [1:0] s_axi_add_io_BRESP;
input   ap_clk;
input   ap_rst_n;

wire   [31:0] a;
wire   [31:0] b;
wire   [31:0] y;
reg    y_ap_vld;
reg    ap_rst_n_inv;

numadd_add_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_ADD_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_ADD_IO_DATA_WIDTH ))
numadd_add_io_s_axi_U(
    .AWVALID(s_axi_add_io_AWVALID),
    .AWREADY(s_axi_add_io_AWREADY),
    .AWADDR(s_axi_add_io_AWADDR),
    .WVALID(s_axi_add_io_WVALID),
    .WREADY(s_axi_add_io_WREADY),
    .WDATA(s_axi_add_io_WDATA),
    .WSTRB(s_axi_add_io_WSTRB),
    .ARVALID(s_axi_add_io_ARVALID),
    .ARREADY(s_axi_add_io_ARREADY),
    .ARADDR(s_axi_add_io_ARADDR),
    .RVALID(s_axi_add_io_RVALID),
    .RREADY(s_axi_add_io_RREADY),
    .RDATA(s_axi_add_io_RDATA),
    .RRESP(s_axi_add_io_RRESP),
    .BVALID(s_axi_add_io_BVALID),
    .BREADY(s_axi_add_io_BREADY),
    .BRESP(s_axi_add_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .a(a),
    .b(b),
    .y(y),
    .y_ap_vld(y_ap_vld)
);

always @ (*) begin
    if (~(ap_start == 1'b0)) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign y = (b + a);

endmodule //numadd
